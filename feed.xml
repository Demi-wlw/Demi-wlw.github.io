<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://alshedivat.github.io/al-folio/feed.xml" rel="self" type="application/atom+xml" /><link href="https://alshedivat.github.io/al-folio/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-03-19T23:38:32+00:00</updated><id>https://alshedivat.github.io/al-folio/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design.
</subtitle><entry><title type="html">Understanding ChatGPT</title><link href="https://alshedivat.github.io/al-folio/blog/2023/ChatGPT/" rel="alternate" type="text/html" title="Understanding ChatGPT" /><published>2023-03-19T00:00:00+00:00</published><updated>2023-03-19T00:00:00+00:00</updated><id>https://alshedivat.github.io/al-folio/blog/2023/ChatGPT</id><content type="html" xml:base="https://alshedivat.github.io/al-folio/blog/2023/ChatGPT/"><![CDATA[<p class="text-justify">OpenAI is back in the headlines with news that it is updating its viral ChatGPT with a new version called <a href="https://openai.com/research/gpt-4">GPT-4</a>. If ChatGPT is the car, then GPT-4 is the engine: a powerful general technology that can be shaped down to a number of different uses. GPT-3 and now 4 are actually the internet’s best-known language-processing AI models.</p>

<h2 id="what-is-chatgpt">What is ChatGPT?</h2>

<p class="text-justify"><a href="https://chat.openai.com/chat">ChatGPT</a> is a large language model developed by OpenAI, which is based on the GPT (Generative Pre-trained Transformer) architecture. It is designed to understand natural language, generate human-like responses, and complete a variety of language tasks including language translation, text summarization, question-answering and more. It has been trained on a massive amount of text data from the internet, books, and other sources, allowing it to learn and understand a wide range of topics and provide informative and engaging responses.</p>

<h2 id="what-is-gpt">What is GPT?</h2>

<p class="text-justify">GPT (Generative Pre-trained Transformer) is a type of neural network architecture used for natural language processing (NLP) tasks, such as language modeling, text classification, and machine translation. It was first introduced by OpenAI in 2018, and has been used in a wide variety of applications.</p>

<p class="text-justify">The GPT architecture is based on the <strong>Transformer</strong> model, which was introduced in 2017 by Vaswani et al.<d-cite key="attension2017"></d-cite> allowing to capture long-term dependencies in text without the need for recurrent neural networks and generate high-quality language output. GPT models are <strong>pre-trained</strong> on large amounts of text data using an unsupervised learning approach, where the model is trained to <strong><em>predict the next word</em></strong> in a sequence of text. The pre-training allows the model to learn the statistical language patterns and contextual relationships within natural language text, which can then be fine-tuned on specific NLP tasks, such as language translation, text classification, and text generation with smaller amounts of labeled data.</p>

<p class="text-justify">GPT has been a major breakthrough in natural language processing and the version GPT-3 has 175 billion parameters. It has been used to achieve state-of-the-art results on a wide variety of language tasks and has been adopted by a variety of industries for language-related applications such as chatbots, text summarization, and language translation. Its ability to pre-train on large amounts of data and adapt to new tasks with few examples makes it a highly versatile and valuable tool for language-related applications.</p>

<hr />

<h2 id="gpt-models">GPT Models</h2>

<ul class="text-justify">
  <li>GPT-1 is open-source <a href="https://openai.com/research/language-unsupervised">here</a> with paper “Improving Language Understanding
by Generative Pre-Training”.</li>
</ul>
<ul class="text-justify">
  <li>GPT-2 is also available <a href="https://openai.com/research/better-language-models">here</a> with paper “Language Models are Unsupervised Multitask Learners”.</li>
</ul>
<ul>
  <li>GPT-3 has published paper <d-cite key="GPT-3"></d-cite>.</li>
</ul>

<p class="text-justify">The first version of GPT was introduced based on the ideas of transformers<d-footnote>A good website for detailed learning can be found <a href="https://lena-voita.github.io/nlp_course/seq2seq_and_attention.html#transformer_intro">here</a> <d-cite key="voita2020nlpCourse"></d-cite>.</d-footnote> and <a href="https://arxiv.org/abs/1511.01432">unsupervised pre-training</a>. Its results provide a convincing example that pairing supervised learning methods with unsupervised pre-training works very well. In summary, GPT as the name suggested, adopts <strong><em>generative pre-training</em></strong> of a language model on a diverse corpus of unlabeled text, followed by discriminative <strong><em>supervised fine-tuning</em></strong> on each specific task.</p>

<h3 id="generative-pre-training">Generative pre-training</h3>

<p class="text-justify">The term <em>generative pre-training</em> represents the unsupervised pre-training of the generative model.<d-footnote>They used a multi-layer Transformer decoder to produce an output distribution over target tokens.</d-footnote> Given an unsupervised corpus of tokens \(\mathcal{U} = \{u_1,\dots,u_n\}\), they use a standard language modeling objective to maximize the following likelihood:</p>

\[L_1(\mathcal{U})=\sum_i\log P(u_i|u_{i-k},\dots,u_{i-1};\Theta)\]

<p class="text-justify">where \(k\) is the size of the context window, and the conditional probability \(P\) is modeled using a neural network with parameters \(\Theta\) trained using stochastic gradient descent. <strong>Intuitively, we train the Transformer-based model to predict the next token within the \(k\)-context window using unlabeled text from which we also extract the latent features \(h\).</strong></p>

<h3 id="supervised-fine-tuning">Supervised fine-tuning</h3>

<p class="text-justify">After training the model with the objective function above, they adapte the parameters to the supervised target task which is referring to <em>supervised fine-tuning</em>. Assume a labeled dataset \(\mathcal{C}\), where each instance consists of a sequence of input tokens, \(x^1,\dots, x^m\), along with a label \(y\). The inputs are passed through the pre-trained model to obtain the final transformer block’s activation \(h_l^m\), which is then fed into an added linear output layer with parameters \(W_y\) to predict \(y\):</p>

\[P(y|x^1,\dots,x^m)=softmax(h_l^mW_y).\]

<p>This gives us the following objective to maximize:</p>

\[L_2(\mathcal{C})=\sum_{(x,y)}\log P(y|x^1,\dots,x^m)\]

<p class="text-justify">They additionally found that including language modeling as an auxiliary objective to the fine-tuning helped learning by (a) improving generalization of the supervised model, and (b) accelerating convergence. Specifically, we optimize the following objective (with weight \(\lambda\)): \(L_3(\mathcal{C})=L_2(\mathcal{C})+\lambda*L_1(\mathcal{C})\).</p>

<p class="text-justify">Some tasks, like question answering or textual entailment, have structured inputs such as ordered sentence pairs, or triplets of document, question, and answers that are different from the contiguous sequences of text inputs of pre-trained model so they require some modifications to apply GPT. This results in the <strong><em>input transformations</em></strong> which allow us to avoid making extensive changes to the architecture across tasks. A brief description of these input transformations is shown in Figure 1 (credit to the <a href="https://cdn.openai.com/research-covers/language-unsupervised/language_understanding_paper.pdf">paper</a>).</p>

<div class="row justify-content-sm-center">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/al-folio/assets/img/GPT1_inputTrans-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/al-folio/assets/img/GPT1_inputTrans-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/al-folio/assets/img/GPT1_inputTrans-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/al-folio/assets/img/GPT1_inputTrans.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" title="GPT-1 with input transformations" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

    </div>
</div>

<hr />

<h2 id="improvements-of-gpts">Improvements of GPTs</h2>

<p class="text-justify"><strong>GPT-1</strong> employes the idea of unsupervised learning for training representations of words using large amounts of unlabeled data consisting of terabytes of information and then integrates supervised learning for fine-tuning to improve performance on a wide range of NLP tasks. However, it has drawbacks including (1) Compute requirements (expensive pre-training step) (2) The limits and bias of learning about the world through text, and (3) Still brittle generalization.</p>

<p class="text-justify"><strong>GPT-2</strong> is a larger model with 1.5 billion parameters following the details of GPT-1 (117 million parameters) with a few modifications. This larger size allows it to capture more complex language patterns and relationships. In short, GPT-2 is a direct scale-up of GPT-1, with more than \(10\times\) the parameters and trained on more than \(10\times\) the amount of data.</p>

<p><strong>GPT-3</strong> uses a variety of techniques to improve performance, including:</p>
<ol class="text-justify">
  <li>Larger size: has 175 billion parameters which allows to capture even more complex language patterns and relationships.</li>
  <li>Adaptive computation: dynamically adjusts the number of parameters used for each task, allowing it to allocate more resources to complex tasks and fewer resources to simpler tasks.</li>
  <li>Few-shot learning: learns to perform a new task with just a few examples, making it highly flexible and adaptable to new tasks and contexts.</li>
  <li>Prompt engineering: can be given a natural language prompt to generate text that fits a specific context or follows a specific style.</li>
</ol>]]></content><author><name>Luwei Wang</name></author><category term="site-posts" /><category term="machine-learning/AI" /><category term="NLP" /><category term="application" /><summary type="html"><![CDATA[a summary of ChatGPT and GPT techniques]]></summary></entry><entry><title type="html">Summary of Latex code for symbols</title><link href="https://alshedivat.github.io/al-folio/blog/2023/Latex-symbols/" rel="alternate" type="text/html" title="Summary of Latex code for symbols" /><published>2023-03-10T00:00:00+00:00</published><updated>2023-03-10T00:00:00+00:00</updated><id>https://alshedivat.github.io/al-folio/blog/2023/Latex-symbols</id><content type="html" xml:base="https://alshedivat.github.io/al-folio/blog/2023/Latex-symbols/"><![CDATA[]]></content><author><name></name></author><category term="site-posts" /><category term="code" /><summary type="html"><![CDATA[Redirecting to a pdf]]></summary></entry><entry><title type="html">a post with giscus comments</title><link href="https://alshedivat.github.io/al-folio/blog/2022/giscus-comments/" rel="alternate" type="text/html" title="a post with giscus comments" /><published>2022-12-10T15:59:00+00:00</published><updated>2022-12-10T15:59:00+00:00</updated><id>https://alshedivat.github.io/al-folio/blog/2022/giscus-comments</id><content type="html" xml:base="https://alshedivat.github.io/al-folio/blog/2022/giscus-comments/"><![CDATA[<p>This post shows how to add GISCUS comments.</p>]]></content><author><name></name></author><category term="sample-posts" /><category term="external-services" /><summary type="html"><![CDATA[an example of a blog post with giscus comments]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://alshedivat.github.io/al-folio/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog" /><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://alshedivat.github.io/al-folio/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://alshedivat.github.io/al-folio/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">a post with redirect</title><link href="https://alshedivat.github.io/al-folio/blog/2022/redirect/" rel="alternate" type="text/html" title="a post with redirect" /><published>2022-02-01T17:39:00+00:00</published><updated>2022-02-01T17:39:00+00:00</updated><id>https://alshedivat.github.io/al-folio/blog/2022/redirect</id><content type="html" xml:base="https://alshedivat.github.io/al-folio/blog/2022/redirect/"><![CDATA[<p>Redirecting to another page.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[you can also redirect to assets like pdf]]></summary></entry><entry><title type="html">a post with diagrams</title><link href="https://alshedivat.github.io/al-folio/blog/2021/diagrams/" rel="alternate" type="text/html" title="a post with diagrams" /><published>2021-07-04T17:39:00+00:00</published><updated>2021-07-04T17:39:00+00:00</updated><id>https://alshedivat.github.io/al-folio/blog/2021/diagrams</id><content type="html" xml:base="https://alshedivat.github.io/al-folio/blog/2021/diagrams/"><![CDATA[<p>This theme supports generating various diagrams from a text description using <a href="https://github.com/zhustec/jekyll-diagrams" target="\_blank">jekyll-diagrams</a> plugin.
Below, we generate a few examples of such diagrams using languages such as <a href="https://mermaid-js.github.io/mermaid/" target="\_blank">mermaid</a>, <a href="https://plantuml.com/" target="\_blank">plantuml</a>, <a href="https://vega.github.io/vega-lite/" target="\_blank">vega-lite</a>, etc.</p>

<p><strong>Note:</strong> different diagram-generation packages require external dependencies to be installed on your machine.
Also, be mindful of that because of diagram generation the fist time you build your Jekyll website after adding new diagrams will be SLOW.
For any other details, please refer to <a href="https://github.com/zhustec/jekyll-diagrams" target="\_blank">jekyll-diagrams</a> README.</p>

<h2 id="mermaid">Mermaid</h2>

<p>Install mermaid using <code class="language-plaintext highlighter-rouge">node.js</code> package manager <code class="language-plaintext highlighter-rouge">npm</code> by running the following command:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">-g</span> mermaid.cli
</code></pre></div></div>

<p>The diagram below was generated by the following code:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% mermaid %}
sequenceDiagram
    participant John
    participant Alice
    Alice-&gt;&gt;John: Hello John, how are you?
    John--&gt;&gt;Alice: Great!
{% endmermaid %}
</code></pre></div></div>

<div class="jekyll-diagrams diagrams mermaid">
  <svg id="mermaid-1679269129011" width="100%" xmlns="http://www.w3.org/2000/svg" height="100%" style="max-width:450px;" viewBox="-50 -10 450 231"><style>#mermaid-1679269129011 .label{font-family:trebuchet ms,verdana,arial;color:#333}#mermaid-1679269129011 .node circle,#mermaid-1679269129011 .node ellipse,#mermaid-1679269129011 .node polygon,#mermaid-1679269129011 .node rect{fill:#ececff;stroke:#9370db;stroke-width:1px}#mermaid-1679269129011 .node.clickable{cursor:pointer}#mermaid-1679269129011 .arrowheadPath{fill:#333}#mermaid-1679269129011 .edgePath .path{stroke:#333;stroke-width:1.5px}#mermaid-1679269129011 .edgeLabel{background-color:#e8e8e8}#mermaid-1679269129011 .cluster rect{fill:#ffffde!important;stroke:#aa3!important;stroke-width:1px!important}#mermaid-1679269129011 .cluster text{fill:#333}#mermaid-1679269129011 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:trebuchet ms,verdana,arial;font-size:12px;background:#ffffde;border:1px solid #aa3;border-radius:2px;pointer-events:none;z-index:100}#mermaid-1679269129011 .actor{stroke:#ccf;fill:#ececff}#mermaid-1679269129011 text.actor{fill:#000;stroke:none}#mermaid-1679269129011 .actor-line{stroke:grey}#mermaid-1679269129011 .messageLine0{marker-end:"url(#arrowhead)"}#mermaid-1679269129011 .messageLine0,#mermaid-1679269129011 .messageLine1{stroke-width:1.5;stroke-dasharray:"2 2";stroke:#333}#mermaid-1679269129011 #arrowhead{fill:#333}#mermaid-1679269129011 #crosshead path{fill:#333!important;stroke:#333!important}#mermaid-1679269129011 .messageText{fill:#333;stroke:none}#mermaid-1679269129011 .labelBox{stroke:#ccf;fill:#ececff}#mermaid-1679269129011 .labelText,#mermaid-1679269129011 .loopText{fill:#000;stroke:none}#mermaid-1679269129011 .loopLine{stroke-width:2;stroke-dasharray:"2 2";marker-end:"url(#arrowhead)";stroke:#ccf}#mermaid-1679269129011 .note{stroke:#aa3;fill:#fff5ad}#mermaid-1679269129011 .noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}#mermaid-1679269129011 .section{stroke:none;opacity:.2}#mermaid-1679269129011 .section0{fill:rgba(102,102,255,.49)}#mermaid-1679269129011 .section2{fill:#fff400}#mermaid-1679269129011 .section1,#mermaid-1679269129011 .section3{fill:#fff;opacity:.2}#mermaid-1679269129011 .sectionTitle0,#mermaid-1679269129011 .sectionTitle1,#mermaid-1679269129011 .sectionTitle2,#mermaid-1679269129011 .sectionTitle3{fill:#333}#mermaid-1679269129011 .sectionTitle{text-anchor:start;font-size:11px;text-height:14px}#mermaid-1679269129011 .grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}#mermaid-1679269129011 .grid path{stroke-width:0}#mermaid-1679269129011 .today{fill:none;stroke:red;stroke-width:2px}#mermaid-1679269129011 .task{stroke-width:2}#mermaid-1679269129011 .taskText{text-anchor:middle;font-size:11px}#mermaid-1679269129011 .taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}#mermaid-1679269129011 .taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}#mermaid-1679269129011 .taskText0,#mermaid-1679269129011 .taskText1,#mermaid-1679269129011 .taskText2,#mermaid-1679269129011 .taskText3{fill:#fff}#mermaid-1679269129011 .task0,#mermaid-1679269129011 .task1,#mermaid-1679269129011 .task2,#mermaid-1679269129011 .task3{fill:#8a90dd;stroke:#534fbc}#mermaid-1679269129011 .taskTextOutside0,#mermaid-1679269129011 .taskTextOutside1,#mermaid-1679269129011 .taskTextOutside2,#mermaid-1679269129011 .taskTextOutside3{fill:#000}#mermaid-1679269129011 .active0,#mermaid-1679269129011 .active1,#mermaid-1679269129011 .active2,#mermaid-1679269129011 .active3{fill:#bfc7ff;stroke:#534fbc}#mermaid-1679269129011 .activeText0,#mermaid-1679269129011 .activeText1,#mermaid-1679269129011 .activeText2,#mermaid-1679269129011 .activeText3{fill:#000!important}#mermaid-1679269129011 .done0,#mermaid-1679269129011 .done1,#mermaid-1679269129011 .done2,#mermaid-1679269129011 .done3{stroke:grey;fill:#d3d3d3;stroke-width:2}#mermaid-1679269129011 .doneText0,#mermaid-1679269129011 .doneText1,#mermaid-1679269129011 .doneText2,#mermaid-1679269129011 .doneText3{fill:#000!important}#mermaid-1679269129011 .crit0,#mermaid-1679269129011 .crit1,#mermaid-1679269129011 .crit2,#mermaid-1679269129011 .crit3{stroke:#f88;fill:red;stroke-width:2}#mermaid-1679269129011 .activeCrit0,#mermaid-1679269129011 .activeCrit1,#mermaid-1679269129011 .activeCrit2,#mermaid-1679269129011 .activeCrit3{stroke:#f88;fill:#bfc7ff;stroke-width:2}#mermaid-1679269129011 .doneCrit0,#mermaid-1679269129011 .doneCrit1,#mermaid-1679269129011 .doneCrit2,#mermaid-1679269129011 .doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}#mermaid-1679269129011 .activeCritText0,#mermaid-1679269129011 .activeCritText1,#mermaid-1679269129011 .activeCritText2,#mermaid-1679269129011 .activeCritText3,#mermaid-1679269129011 .doneCritText0,#mermaid-1679269129011 .doneCritText1,#mermaid-1679269129011 .doneCritText2,#mermaid-1679269129011 .doneCritText3{fill:#000!important}#mermaid-1679269129011 .titleText{text-anchor:middle;font-size:18px;fill:#000}#mermaid-1679269129011 g.classGroup text{fill:#9370db;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}#mermaid-1679269129011 g.classGroup rect{fill:#ececff;stroke:#9370db}#mermaid-1679269129011 g.classGroup line{stroke:#9370db;stroke-width:1}#mermaid-1679269129011 .classLabel .box{stroke:none;stroke-width:0;fill:#ececff;opacity:.5}#mermaid-1679269129011 .classLabel .label{fill:#9370db;font-size:10px}#mermaid-1679269129011 .relation{stroke:#9370db;stroke-width:1;fill:none}#mermaid-1679269129011 #compositionEnd,#mermaid-1679269129011 #compositionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1679269129011 #aggregationEnd,#mermaid-1679269129011 #aggregationStart{fill:#ececff;stroke:#9370db;stroke-width:1}#mermaid-1679269129011 #dependencyEnd,#mermaid-1679269129011 #dependencyStart,#mermaid-1679269129011 #extensionEnd,#mermaid-1679269129011 #extensionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1679269129011 .branch-label,#mermaid-1679269129011 .commit-id,#mermaid-1679269129011 .commit-msg{fill:#d3d3d3;color:#d3d3d3}</style><style>#mermaid-1679269129011 {
    color: rgb(0, 0, 0);
    font: normal normal 400 normal 16px / normal "Times New Roman";
  }</style><g></g><g><line id="actor0" x1="75" y1="5" x2="75" y2="220" class="actor-line" stroke-width="0.5px" stroke="#999"></line><rect x="0" y="0" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="75" y="32.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="75" dy="0">John</tspan></text></g><g><line id="actor1" x1="275" y1="5" x2="275" y2="220" class="actor-line" stroke-width="0.5px" stroke="#999"></line><rect x="200" y="0" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="275" y="32.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="275" dy="0">Alice</tspan></text></g><defs><marker id="arrowhead" refX="5" refY="2" markerWidth="6" markerHeight="4" orient="auto"><path d="M 0,0 V 4 L6,2 Z"></path></marker></defs><defs><marker id="crosshead" markerWidth="15" markerHeight="8" orient="auto" refX="16" refY="4"><path fill="black" stroke="#000000" stroke-width="1px" d="M 9,2 V 6 L16,4 Z" style="stroke-dasharray: 0, 0;"></path><path fill="none" stroke="#000000" stroke-width="1px" d="M 0,1 L 6,7 M 6,1 L 0,7" style="stroke-dasharray: 0, 0;"></path></marker></defs><g><text x="175" y="93" class="messageText" style="text-anchor: middle;">Hello John, how are you?</text><line x1="275" y1="100" x2="75" y2="100" class="messageLine0" stroke-width="2" stroke="black" marker-end="url(#arrowhead)" style="fill: none;"></line></g><g><text x="175" y="128" class="messageText" style="text-anchor: middle;">Great!</text><line x1="75" y1="135" x2="275" y2="135" class="messageLine1" stroke-width="2" stroke="black" marker-end="url(#arrowhead)" style="stroke-dasharray: 3, 3; fill: none;"></line></g><g><rect x="0" y="155" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="75" y="187.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="75" dy="0">John</tspan></text></g><g><rect x="200" y="155" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="275" y="187.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="275" dy="0">Alice</tspan></text></g></svg>
</div>]]></content><author><name></name></author><summary type="html"><![CDATA[an example of a blog post with diagrams]]></summary></entry><entry><title type="html">a distill-style blog post</title><link href="https://alshedivat.github.io/al-folio/blog/2021/distill/" rel="alternate" type="text/html" title="a distill-style blog post" /><published>2021-05-22T00:00:00+00:00</published><updated>2021-05-22T00:00:00+00:00</updated><id>https://alshedivat.github.io/al-folio/blog/2021/distill</id><content type="html" xml:base="https://alshedivat.github.io/al-folio/blog/2021/distill/"><![CDATA[<h2 id="equations">Equations</h2>

<p>This theme supports rendering beautiful math in inline and display modes using <a href="https://www.mathjax.org/">MathJax 3</a> engine.
You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>.
If you leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p>

<p>To use display mode, again surround your expression with <code class="language-plaintext highlighter-rouge">$$</code> and place it as a separate paragraph.
Here is an example:</p>

\[\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)\]

<p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p>

<hr />

<h2 id="citations">Citations</h2>

<p>Citations are then used in the article body with the <code class="language-plaintext highlighter-rouge">&lt;d-cite&gt;</code> tag.
The key attribute is a reference to the id provided in the bibliography.
The key attribute can take multiple ids, separated by commas.</p>

<p>The citation is presented inline like this: <d-cite key="gregor2015draw"></d-cite> (a number that displays more information on hover).
If you have an appendix, a bibliography is automatically created and populated in it.</p>

<p>Distill chose a numerical inline citation style to improve readability of citation dense articles and because many of the benefits of longer citations are obviated by displaying more information on hover.
However, we consider it good style to mention author last names if you discuss something at length and it fits into the flow well — the authors are human and it’s nice for them to have the community associate them with their work.</p>

<hr />

<h2 id="footnotes">Footnotes</h2>

<p>Just wrap the text you would like to show up in a footnote in a <code class="language-plaintext highlighter-rouge">&lt;d-footnote&gt;</code> tag.
The number of the footnote will be automatically generated.<d-footnote>This will become a hoverable footnote.</d-footnote></p>

<hr />

<h2 id="code-blocks">Code Blocks</h2>

<p>Syntax highlighting is provided within <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> tags.
An example of inline code snippets: <code class="language-plaintext highlighter-rouge">&lt;d-code language="html"&gt;let x = 10;&lt;/d-code&gt;</code>.
For larger blocks of code, add a <code class="language-plaintext highlighter-rouge">block</code> attribute:</p>

<d-code block="" language="javascript">
  var x = 25;
  function(x) {
    return x * x;
  }
</d-code>

<p><strong>Note:</strong> <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> blocks do not look good in the dark mode.
You can always use the default code-highlight using the <code class="language-plaintext highlighter-rouge">highlight</code> liquid tag:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
<span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">x</span> <span class="o">*</span> <span class="nx">x</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<hr />

<h2 id="interactive-plots">Interactive Plots</h2>

<p>You can add interative plots using plotly + iframes :framed_picture:</p>

<div class="l-page">
  <iframe src="/al-folio/assets/plotly/demo.html" frameborder="0" scrolling="no" height="500px" width="100%" style="border: 1px dashed grey;"></iframe>
</div>

<p>The plot must be generated separately and saved into an HTML file.
To generate the plot that you see above, you can use the following code snippet:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">plotly.express</span> <span class="k">as</span> <span class="n">px</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span>
  <span class="s">'https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv'</span>
<span class="p">)</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="p">.</span><span class="nf">density_mapbox</span><span class="p">(</span>
  <span class="n">df</span><span class="p">,</span>
  <span class="n">lat</span><span class="o">=</span><span class="s">'Latitude'</span><span class="p">,</span>
  <span class="n">lon</span><span class="o">=</span><span class="s">'Longitude'</span><span class="p">,</span>
  <span class="n">z</span><span class="o">=</span><span class="s">'Magnitude'</span><span class="p">,</span>
  <span class="n">radius</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
  <span class="n">center</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">lat</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">lon</span><span class="o">=</span><span class="mi">180</span><span class="p">),</span>
  <span class="n">zoom</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
  <span class="n">mapbox_style</span><span class="o">=</span><span class="s">"stamen-terrain"</span><span class="p">,</span>
<span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">write_html</span><span class="p">(</span><span class="s">'assets/plotly/demo.html'</span><span class="p">)</span></code></pre></figure>

<hr />

<h2 id="layouts">Layouts</h2>

<p>The main text column is referred to as the body.
It is the assumed layout of any direct descendants of the <code class="language-plaintext highlighter-rouge">d-article</code> element.</p>

<div class="fake-img l-body">
  <p>.l-body</p>
</div>

<p>For images you want to display a little larger, try <code class="language-plaintext highlighter-rouge">.l-page</code>:</p>

<div class="fake-img l-page">
  <p>.l-page</p>
</div>

<p>All of these have an outset variant if you want to poke out from the body text a little bit.
For instance:</p>

<div class="fake-img l-body-outset">
  <p>.l-body-outset</p>
</div>

<div class="fake-img l-page-outset">
  <p>.l-page-outset</p>
</div>

<p>Occasionally you’ll want to use the full browser width.
For this, use <code class="language-plaintext highlighter-rouge">.l-screen</code>.
You can also inset the element a little from the edge of the browser by using the inset variant.</p>

<div class="fake-img l-screen">
  <p>.l-screen</p>
</div>
<div class="fake-img l-screen-inset">
  <p>.l-screen-inset</p>
</div>

<p>The final layout is for marginalia, asides, and footnotes.
It does not interrupt the normal flow of <code class="language-plaintext highlighter-rouge">.l-body</code> sized text except on mobile screen sizes.</p>

<div class="fake-img l-gutter">
  <p>.l-gutter</p>
</div>

<hr />

<h2 id="other-typography">Other Typography?</h2>

<p>Emphasis, aka italics, with <em>asterisks</em> (<code class="language-plaintext highlighter-rouge">*asterisks*</code>) or <em>underscores</em> (<code class="language-plaintext highlighter-rouge">_underscores_</code>).</p>

<p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.</p>

<p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p>

<p>Strikethrough uses two tildes. <del>Scratch this.</del></p>

<ol>
  <li>First ordered list item</li>
  <li>Another item
⋅⋅* Unordered sub-list.</li>
  <li>Actual numbers don’t matter, just that it’s a number
⋅⋅1. Ordered sub-list</li>
  <li>And another item.</li>
</ol>

<p>⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we’ll use three here to also align the raw Markdown).</p>

<p>⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅
⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅
⋅⋅⋅(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</p>

<ul>
  <li>Unordered list can use asterisks</li>
  <li>Or minuses</li>
  <li>Or pluses</li>
</ul>

<p><a href="https://www.google.com">I’m an inline-style link</a></p>

<p><a href="https://www.google.com" title="Google's Homepage">I’m an inline-style link with title</a></p>

<p><a href="https://www.mozilla.org">I’m a reference-style link</a></p>

<p><a href="../blob/master/LICENSE">I’m a relative reference to a repository file</a></p>

<p><a href="http://slashdot.org">You can use numbers for reference-style link definitions</a></p>

<p>Or leave it empty and use the <a href="http://www.reddit.com">link text itself</a>.</p>

<p>URLs and URLs in angle brackets will automatically get turned into links.
http://www.example.com or <a href="http://www.example.com">http://www.example.com</a> and sometimes
example.com (but not on Github, for example).</p>

<p>Some text to show that the reference links can follow later.</p>

<p>Here’s our logo (hover to see the title text):</p>

<p>Inline-style:
<img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 1" /></p>

<p>Reference-style:
<img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 2" /></p>

<p>Inline <code class="language-plaintext highlighter-rouge">code</code> has <code class="language-plaintext highlighter-rouge">back-ticks around</code> it.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">JavaScript syntax highlighting</span><span class="dl">"</span><span class="p">;</span>
<span class="nf">alert</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">=</span> <span class="s">"Python syntax highlighting"</span>
<span class="k">print</span> <span class="n">s</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>No language indicated, so no syntax highlighting.
But let's throw in a &lt;b&gt;tag&lt;/b&gt;.
</code></pre></div></div>

<p>Colons can be used to align columns.</p>

<table>
  <thead>
    <tr>
      <th>Tables</th>
      <th style="text-align: center">Are</th>
      <th style="text-align: right">Cool</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>col 3 is</td>
      <td style="text-align: center">right-aligned</td>
      <td style="text-align: right">$1600</td>
    </tr>
    <tr>
      <td>col 2 is</td>
      <td style="text-align: center">centered</td>
      <td style="text-align: right">$12</td>
    </tr>
    <tr>
      <td>zebra stripes</td>
      <td style="text-align: center">are neat</td>
      <td style="text-align: right">$1</td>
    </tr>
  </tbody>
</table>

<p>There must be at least 3 dashes separating each header cell.
The outer pipes (|) are optional, and you don’t need to make the
raw Markdown line up prettily. You can also use inline Markdown.</p>

<table>
  <thead>
    <tr>
      <th>Markdown</th>
      <th>Less</th>
      <th>Pretty</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><em>Still</em></td>
      <td><code class="language-plaintext highlighter-rouge">renders</code></td>
      <td><strong>nicely</strong></td>
    </tr>
    <tr>
      <td>1</td>
      <td>2</td>
      <td>3</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>Blockquotes are very handy in email to emulate reply text.
This line is part of the same quote.</p>
</blockquote>

<p>Quote break.</p>

<blockquote>
  <p>This is a very long line that will still be quoted properly when it wraps. Oh boy let’s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can <em>put</em> <strong>Markdown</strong> into a blockquote.</p>
</blockquote>

<p>Here’s a line for us to start with.</p>

<p>This line is separated from the one above by two newlines, so it will be a <em>separate paragraph</em>.</p>

<p>This line is also a separate paragraph, but…
This line is only separated by a single newline, so it’s a separate line in the <em>same paragraph</em>.</p>]]></content><author><name>Albert Einstein</name></author><summary type="html"><![CDATA[an example of a distill-style blog post and main elements]]></summary></entry><entry><title type="html">a post with github metadata</title><link href="https://alshedivat.github.io/al-folio/blog/2020/github-metadata/" rel="alternate" type="text/html" title="a post with github metadata" /><published>2020-09-28T21:01:00+00:00</published><updated>2020-09-28T21:01:00+00:00</updated><id>https://alshedivat.github.io/al-folio/blog/2020/github-metadata</id><content type="html" xml:base="https://alshedivat.github.io/al-folio/blog/2020/github-metadata/"><![CDATA[<p>A sample blog page that demonstrates the accessing of github meta data.</p>

<h2 id="what-does-github-metadata-do">What does Github-MetaData do?</h2>
<ul>
  <li>Propagates the site.github namespace with repository metadata</li>
  <li>Setting site variables :
    <ul>
      <li>site.title</li>
      <li>site.description</li>
      <li>site.url</li>
      <li>site.baseurl</li>
    </ul>
  </li>
  <li>Accessing the metadata - duh.</li>
  <li>Generating edittable links.</li>
</ul>

<h2 id="additional-reading">Additional Reading</h2>
<ul>
  <li>If you’re recieving incorrect/missing data, you may need to perform a Github API<a href="https://github.com/jekyll/github-metadata/blob/master/docs/authentication.md"> authentication</a>.</li>
  <li>Go through this <a href="https://jekyll.github.io/github-metadata/">README</a> for more details on the topic.</li>
  <li><a href="https://github.com/jekyll/github-metadata/blob/master/docs/site.github.md">This page</a> highlights all the feilds you can access with github-metadata.
<br /></li>
</ul>

<h2 id="example-metadata">Example MetaData</h2>
<ul>
  <li>Host Name :</li>
  <li>URL :</li>
  <li>BaseURL :</li>
  <li>Archived :</li>
  <li>Contributors :</li>
</ul>]]></content><author><name></name></author><category term="sample-posts" /><category term="external-services" /><summary type="html"><![CDATA[a quick run down on accessing github metadata.]]></summary></entry><entry><title type="html">a post with twitter</title><link href="https://alshedivat.github.io/al-folio/blog/2020/twitter/" rel="alternate" type="text/html" title="a post with twitter" /><published>2020-09-28T15:12:00+00:00</published><updated>2020-09-28T15:12:00+00:00</updated><id>https://alshedivat.github.io/al-folio/blog/2020/twitter</id><content type="html" xml:base="https://alshedivat.github.io/al-folio/blog/2020/twitter/"><![CDATA[<p>A sample blog page that demonstrates the inclusion of Tweets/Timelines/etc.</p>

<h1 id="tweet">Tweet</h1>
<p>An example of displaying a tweet:</p>
<div class="jekyll-twitter-plugin"><blockquote class="twitter-tweet"><p lang="sv" dir="ltr">jekyll-twitter-plugin (1.0.0): A Liquid tag plugin for Jekyll that renders Tweets from Twitter API <a href="http://t.co/m4EIQPM9h4">http://t.co/m4EIQPM9h4</a></p>&mdash; RubyGems (@rubygems) <a href="https://twitter.com/rubygems/status/518821243320287232?ref_src=twsrc%5Etfw">October 5, 2014</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</div>

<h1 id="timeline">Timeline</h1>
<p>An example of pulling from a timeline:</p>
<div class="jekyll-twitter-plugin"><a class="twitter-timeline" data-width="500" data-tweet-limit="3" href="https://twitter.com/jekyllrb?ref_src=twsrc%5Etfw">Tweets by jekyllrb</a>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</div>

<h1 id="additional-details">Additional Details</h1>
<p>For more details on using the plugin visit: <a href="https://github.com/rob-murray/jekyll-twitter-plugin">jekyll-twitter-plugin</a></p>]]></content><author><name></name></author><category term="sample-posts" /><category term="external-services" /><category term="formatting" /><summary type="html"><![CDATA[an example of a blog post with twitter]]></summary></entry><entry><title type="html">a post with disqus comments</title><link href="https://alshedivat.github.io/al-folio/blog/2015/disqus-comments/" rel="alternate" type="text/html" title="a post with disqus comments" /><published>2015-10-20T15:59:00+00:00</published><updated>2015-10-20T15:59:00+00:00</updated><id>https://alshedivat.github.io/al-folio/blog/2015/disqus-comments</id><content type="html" xml:base="https://alshedivat.github.io/al-folio/blog/2015/disqus-comments/"><![CDATA[<p>This post shows how to add DISQUS comments.</p>]]></content><author><name></name></author><category term="sample-posts" /><category term="external-services" /><summary type="html"><![CDATA[an example of a blog post with disqus comments]]></summary></entry></feed>